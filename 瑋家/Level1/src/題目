	學習目標: Thread , Runnable
	
	請設計一個銀行類別 Bank 以及 使用者類別 User
	Bank 管理一個公用的帳戶 (只有一個帳戶,所有User共用之) get account from bank
	並開放兩個函數供 User 操作 該公用帳戶 user has a account attribute 
	
	void deposit(int money)
	int draw(int money)
	注意提款draw 時，當要提款的金錢數量 大於 帳戶內實際金額 ， 則銀行只回傳剩餘實際金額。
	
	Bank 帳戶 初始金額：10000元
	
	每個 User 手頭金錢 初始金額： 3000元
	
	因為帳戶是公用的，必須保持"一致性"及"安全性" (同步化) ，以避免兩個User 同時提款導致提取金額大於預期 (例如：銀行剩下500$，但若兩個User同時要求提款500$，則會造成兩個User都成功得到500$，而實際上銀行是吃虧的。)
	
	User 隨意產生數個(越多越好)，並且為人工智慧，能自動去Bank提款及存款(請做延遲)，而且每個User都應該占用一個執行緒，因為他們都是活生生的生命，可以同時執行。
	
	當銀行(公用帳戶)的剩餘金額為０時，就宣告系統結束，所以要確認你的AI提取的金額夠大以致系統終能結束，系統結束之後就開始進行驗證一致性需求步驟。
	
	驗證一致性
	為了證實你的系統運行在多執行緒、有許多User會同時操作銀行的情況下還能維持資料一致性，請做到以下驗證：
	
	將所有User的存款金額加總起來 + 初始給予的 10000元 (此為進款)
	將所有銀行的放款金額加總起來　（此為實際放款的金額）